{
  "version": 3,
  "sources": [
    "lib\\marked.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n# Helpers\n###\n\nescape = (html, is_encode)->\n  r_encode =\n    if is_encode\n    then /&/g\n    else /&(?!#?\\w+;)/g\n  html\n  .replace(r_encode, '&amp;')\n  .replace(/</g, '&lt;')\n  .replace(/>/g, '&gt;')\n  .replace(/\"/g, '&quot;')\n  .replace(/'/g, '&#39;')\n\nunescape = (html)->\n  # explicitly match decimal, hex, and named HTML entities\n  html.replace /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, (_, n)->\n    n = n.toLowerCase()\n    switch\n      when n == 'colon'\n        ':'\n      when n.charAt(0) == '#'\n        String.fromCharCode(\n          if n.charAt(1) == 'x'\n            parseInt( n[2..], 16 )\n          else\n            n[1..] - 0\n        )\n      else\n        \"\"\n\nedit = (regex, opt)->\n  regex = regex.source or regex\n  opt = opt or ''\n  self = (name, val)->\n    if name\n      val = val.source or val\n      val = val.replace(/(^|[^\\\\\\[])\\^/g, '$1')\n      regex = regex.replace(name, val)\n      self\n    else\n      new RegExp(regex, opt)\n\nresolveUrl = (base, href)->\n  key = ' ' + base\n  if ! baseUrls[key]\n    # we can ignore everything in base after the last slash of its path component,\n    # but we might need to add _that_\n    # https://tools.ietf.org/html/rfc3986#section-3\n    if /^[^:]+:\\/*[^/]*$/.test(base)\n      baseUrls[key] = base + '/'\n    else\n      baseUrls[key] = base.replace(/[^/]+$/, '') # rtrim not /\n  base = baseUrls[key]\n\n  switch\n    when href[0..1] == '//'\n      base.replace(/:[\\s\\S]*/, ':')\n    when href.charAt(0) == '/'\n      base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1')\n    else\n      base\nbaseUrls = {}\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i\n\nnoop = ->\nnoop.exec = noop\n\n\nsplitCells = (tableRow, count)->\n  cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */)\n  i = 0\n\n  if cells.length > count\n    cells.splice count\n  else\n    while cells.length < count\n      cells.push ''\n\n  for o, i in cells\n    cells[i] = o.replace(/\\\\\\|/g, '|')\n  cells\n\n###\n# Block-Level Grammer\n###\nblock =\n  newline: /^ *\\n+/\n  code: /^( {4}[^\\n]+\\n*)+/\n  fences: noop\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n|$)/\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n|$)/\n  table: noop\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/\n  list: /^( *)(bull)[\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull)\\n*|\\s*$)/\n  html: ///\n    ^\\ {0,3}(?: # optional indentation\n    <(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$) # (1)\n    |comment[^\\n]*(\\n+|$) # (2)\n    |<\\?[\\s\\S]*?\\?>\\n* # (3)\n    |<![A-Z][\\s\\S]*?>\\n* # (4)\n    |<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n* # (5)\n    |</?(tag)(?:\\ +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$) # (6)\n    |<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*?\\ */?>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$) # (7) open tag\n    |</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$) # (7) closing tag\n    )\n  ///\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n|$)/\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n|$)/\n  checkbox: /^\\[([ xX])\\] +/\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/\n  text: /^[^\\n]+/\n  abbr: noop\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/\nblock.def = edit(block.def\n)( 'label', block._label\n)( 'title', block._title\n)()\n\nblock.with_bullet = /^ *([*+-]|\\d+\\.) */\nblock.bullet = /(?:[*+-] |\\d+\\.)/\nblock.item = /^( *)(bull)[^\\n]*(?:\\n(?!\\1bull)[^\\n]*)*/\nblock.item = edit(block.item, 'gm'\n)( /bull/g, block.bullet\n)()\n\nblock.list = edit(block.list\n)( /bull/g, block.bullet\n)( 'hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n|$))'\n)( 'def', '\\\\n+(?=' + block.def.source + ')'\n)()\n\nblock._tag = ///\n  address|article|aside|base|basefont|blockquote|body|caption\n  |center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption\n  |figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe\n  |legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option\n  |p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr\n  |track|ul\n///\n\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/\nblock.html = edit(block.html, 'i'\n)( 'comment', block._comment\n)( 'tag', block._tag\n)('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/\n)()\n\nblock.paragraph = edit(block.paragraph\n)( 'hr', block.hr\n)( 'heading', block.heading\n)( 'lheading', block.lheading\n)( 'tag', block._tag\n)()\n\nblock.blockquote = edit(block.blockquote\n)( 'paragraph', block.paragraph\n)()\n\n###\n# Normal Block Grammar\n###\nblock.normal = Object.assign {}, block\n\n###\n# GFM Block Grammar\n###\nblock.gfm = Object.assign {}, block.normal,\n  fences: /^ *(`{3,}|~{3,}|:{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n|$)/\n  paragraph: /^/\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n|$)/\n  abbr: /^\\*\\[(label)\\] *\\n? *: *([^\\n]+?) *(?:\\n|$)/\n\nblock.gfm.abbr = edit(block.gfm.abbr\n)( 'label', block._label\n)()\n\nblock.gfm.paragraph = edit(block.paragraph\n)( '(?!', \"(?!#{\n  block.gfm.fences.source.replace('\\\\1', '\\\\2')\n}|#{\n  block.list.source.replace('\\\\1', '\\\\3')\n}|\"\n)()\n\n###\n# GFM + Tables Block Grammar\n###\nblock.tables = Object.assign {}, block.gfm,\n  table: /^ *(.*\\|.*) *\\n *((\\|?) *:?-+:? *(?:\\| *:?-+:? *)*(\\|?))(?:\\n *((?:\\3.*[^>\\n ].*\\4(?:\\n|$))*)|$)/\n\n###\n# Pedantic grammar\n# not support\n###\n\nclass Lexer\n  @rules: block\n  @lex: (src, options)->\n    new Lexer(options).lex(src)\n\n  constructor: (@options)->\n    @tokens = []\n    @tokens.notes = []\n    @tokens.links = {}\n    @tokens.abbrs = {}\n    @rules = block.normal\n\n    if @options.gfm\n      @rules =\n        if @options.tables\n        then block.tables\n        else block.gfm\n\n    if ! @options.indentCode\n      @rules.code = noop\n\n  lex: (src)->\n    src = src\n    .replace /\\r\\n|\\r/g, '\\n'\n    .replace /\\t/g, '    '\n    .replace /\\u00a0/g, ' '\n    .replace /\\u2424/g, '\\n'\n    @token src, true\n\n  token: (src, top)->\n    while src\n      # newline\n      if cap = @rules.newline.exec src\n        src = src[cap[0].length ..]\n        if cap[0].length\n          @tokens.push\n            type: 'space'\n            text: cap[0]\n\n      # code\n      if cap = @rules.code.exec src\n        # console.log 'block code', cap\n        src = src[cap[0].length ..]\n        cap = cap[0].replace /^ {4}/gm, ''\n        @tokens.push\n          type: 'code'\n          text: cap\n        continue\n\n      # fences (gfm)\n      if cap = @rules.fences.exec src\n        # console.log 'block fences', cap\n        src = src[cap[0].length ..]\n        mode = cap[1][0]\n        switch mode\n          when ':'\n            @tokens.push\n              type: 'container'\n              lang: cap[2]\n              text: @token cap[3], top\n          else\n            @tokens.push\n              type: 'code'\n              lang: cap[2]\n              text: cap[3] or ''\n        continue\n\n      # heading\n      if cap = @rules.heading.exec src\n        # console.log 'block heading', cap\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth: cap[1].length\n          text: cap[2]\n        continue\n\n      # table no leading pipe (gfm)\n      if top and cap = @rules.table.exec src\n        src = src[cap[0].length ..]\n        trim = /^\\|? *|\\ *\\|? *$/g\n\n        header = splitCells cap[1].replace(trim, '')\n        align = cap[2].replace(trim, '').split(/ *\\| */)\n        cells = cap[5]?.replace(/\\n$/, '').split('\\n').map((o)=> o.replace(trim, '') ) ? []\n\n        item = { type: 'table', header, align, cells }\n        for o, i in align\n          align[i] =\n            if      /^ *-+: *$/.test o  then 'right'\n            else if /^ *:-+: *$/.test o then 'center'\n            else if /^ *:-+ *$/.test o  then 'left'\n            else                              null\n        for o, i in item.cells\n          cells[i] = splitCells o, item.align.length\n        @tokens.push item\n        continue\n\n      # hr\n      if cap = @rules.hr.exec src\n        # console.log 'block hr', cap\n        src = src[cap[0].length ..]\n        @tokens.push type: 'hr'\n        continue\n\n      # blockquote\n      if cap = @rules.blockquote.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'blockquote_start'\n          mode: '>'\n        cap = cap[0].replace /^ *> ?/gm, ''\n        # Pass `top` to keep the current\n        # \"toplevel\" state. This is exactly\n        # how markdown.pl works.\n        @token cap, top, true\n        @tokens.push\n          type: 'blockquote_end'\n        continue\n\n      # list\n      if cap = @rules.list.exec src\n        # console.log 'block list', cap\n        src = src[cap[0].length ..]\n        bull = cap[2]\n        is_ordered = \".\" == bull.slice(-1)\n        @tokens.push\n          type: 'list_start'\n          ordered: is_ordered\n          start:\n            if is_ordered\n            then  +bull\n            else  ''\n        # Get each top-level item.\n        cap = cap[0].match(@rules.item)\n        next = false\n\n        l = cap.length\n        i = 0\n        while i < l\n          item = cap[i]\n          # Remove the list item's bullet\n          # so it is seen as the next token.\n          space = item.length\n          item = item.replace @rules.with_bullet, ''\n\n          # Outdent whatever the\n          # list item contains. Hacky.\n          if ~item.indexOf('\\n ')\n            space -= item.length\n            item = item.replace(///^\\ {1,#{ space }}///gm, '')\n\n          # Determine whether the next list item belongs here.\n          # Backpedal if it does not belong in this list.\n          if @options.smartLists and i != l - 1\n            b = block.bullet.exec(cap[i + 1])[0]\n            if bull != b and !(bull.length > 1 and b.length > 1)\n              src = cap[i + 1 ..].join('\\n') + src\n              i = l - 1\n\n          # Determine whether item is loose or not.\n          # Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          # for discount behavior.\n          loose = next or /\\n\\n(?!\\s*$)/.test(item)\n          if i != l - 1\n            next = item.charAt(item.length - 1) == '\\n'\n            if !loose\n              loose = next\n\n          # Check for task list items\n          checkbox = @rules.checkbox.exec item\n          checked =\n            if checkbox\n              item = item.replace @rules.checkbox, ''\n              checkbox[1] != ' '\n\n          type = if loose then 'loose_item_start' else 'list_item_start'\n          @tokens.push { checked, type, task: checked? }\n\n          # Recurse.\n          @token item, false\n          @tokens.push type: 'list_item_end'\n          i++\n        @tokens.push type: 'list_end'\n        continue\n\n      # html\n      if cap = @rules.html.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type:\n            if @options.sanitize\n            then 'paragraph'\n            else 'html'\n          pre: !@options.sanitizer and cap[1] in ['pre', 'script', 'style']\n          text: cap[0]\n        continue\n\n      # abbr\n      if cap = @rules.abbr.exec src\n        # console.log 'abbr', cap\n        src = src[cap[0].length ..]\n        tag = cap[1]\n        @tokens.abbrs[tag] ||=\n          title: cap[2]\n        @tokens.abbrs_reg = inline.words Object.keys @tokens.abbrs\n        continue\n\n      # def\n      if top and cap = @rules.def.exec src\n        # console.log 'def', cap\n        src = src[cap[0].length ..]\n        if cap[3]\n          cap[3] = cap[3][1...-1]\n        tag = cap[1].toLowerCase()\n        @tokens.links[tag] ||=\n          href:  cap[2]\n          title: cap[3]\n        continue\n\n      # lheading\n      if cap = @rules.lheading.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth:\n            if cap[2] == '='\n            then 1\n            else 2\n          text: cap[1]\n        continue\n \n      # top-level paragraph\n      if top and cap = @rules.paragraph.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'paragraph'\n          text: cap[0]\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        # Top-level should never reach here.\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'text'\n          text: cap[0]\n          top: top\n        continue\n\n      if src\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n    @tokens\n\n\n###\n# Inline-Level Grammar\n###\ninline =\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/\n  url: noop\n  tag: ///\n     ^comment\n    |^</[a-zA-Z][\\w:-]*\\s*>                # self-closing tag\n    |^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?> # open tag\n    |^<\\?[\\s\\S]*?\\?>                       # processing instruction, e.g. <?php ?>\n    |^<![a-zA-Z]+\\s[\\s\\S]*?>               # declaration, e.g. <!DOCTYPE html>\n    |^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>             # CDATA section\n  ///\n\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/\n  reflink: ///\n    ^!?\\[(label)\\]\\[(?!\\s*\\])((?:\n       \\\\[\\[\\]]?\n      |[^\\[\\]\\\\]\n    )+)\\]\n  ///\n  nolink: ///\n    ^!?\\[(?!\\s*\\])((?:\n       \\[[^\\[\\]]*\\]\n      |\\\\[\\[\\]]\n      |[^\\[\\]]\n    )*)\\](?:\\[\\])?\n  ///\n  _strong: ///\n    ^codecode(?:\n       [^code]\n      |[^code]code\n      |code[^code]\n    )+codecode(?!code)\n  ///\n\n  em: ///\n     ^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)\n    |^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)\n    |^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)\n    |^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)\n    |^_([^\\s_])_(?!_)\n    |^\\*([^\\s*])\\*(?!\\*)\n  ///\n  mdi: /^:(mdi-[^:]+):(?!:)/\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/\n  br: /^ {2,}\\n(?!\\s*$)/\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*~=+:\\-\\^]|\\b_| {2,}\\n|$)/\n  # extended\n  note: /^\\^\\[(label)\\]/\n  _supsub: /^code(?:[^\\s]|codecode)+code(?!code)/\n\n  _url_peice: ///\n      ^$\n    | ^mailto:\n    | :\\/\\/\n    | ^(\\.{0,2})[\\?\\#\\/]\n    | ^[\\w()%+:/]+$\n  ///ig\n\ninline.words = (list)->\n  keys = list.map (s)-> s.replace /[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'\n  ///(#{ keys.join '|' })///g\n\ninline.strong =\n  for c in ['_', '~', '=', ':', '\\\\*', '\\\\+', '\\\\-']\n    edit(inline._strong)(/code/g, c)().source\ninline.strong.push ///\n  ^\\[\\[(?:\n    [^\\]]|[^\\]]\\]|\\][^\\]]\n  )+\\]\\](?!\\])\n///.source\ninline.strong = new RegExp inline.strong.join(\"|\")\n\ninline.supsub =\n  for c in ['\\\\^', '~']\n    edit(inline._supsub)(/code/g, c)().source\ninline.supsub = new RegExp inline.supsub.join(\"|\")\n\ninline._escapes = edit(inline.escape, 'g'\n)('^',''\n)()\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/\ninline._email = ///\n  [a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+\n  (@)\n  [a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\n  (?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+\n  (?![-_])\n///\ninline.autolink = edit(inline.autolink\n)('scheme', inline._scheme\n)('email', inline._email\n)()\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/\ninline.tag = edit(inline.tag\n)('comment', block._comment\n)('attribute', inline._attribute\n)()\n\ninline._label = ///(?:\n   \\[[^\\[\\]]*\\]\n  |\\\\[\\[\\]]?\n  |`[^`]*`\n  |[^\\[\\]\\\\]\n)*?///\ninline._href = ///\n    \\s*(\n       <(?:\n         \\\\[<>]?\n        |[^\\s<>\\\\]\n      )*>\n      |(?:\n         \\\\[()]?\n        |\\([^\\s\\x00-\\x1f()\\\\]*\\)\n        |[^\\s\\x00-\\x1f()\\\\]\n      )*?\n    )\n  ///\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/\n\ninline.link = edit(inline.link\n)('label', inline._label\n)('href', inline._href\n)('title', inline._title\n)()\n\ninline.reflink = edit(inline.reflink\n)('label', inline._label\n)()\n\ninline.note = edit(inline.note\n)('label', inline._label\n)()\n\n###\n# Normal Inline Grammar\n###\ninline.normal = Object.assign({}, inline)\n\n###\n# Pedantic Inline Grammar\n# -- bye --\n###\n\n###\n# GFM Inline Grammar\n###\ninline.gfm = Object.assign({}, inline.normal,\n  url: edit(\n    /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/\n  )('email', inline._email)(\n  )\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/\n  text: edit(\n    inline.text\n  )('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|'\n  )()\n)\n\n###\n# GFM + Line Breaks Inline Grammar\n###\ninline.breaks = Object.assign({}, inline.gfm,\n  br: edit(inline.br)('{2,}', '*')()\n  text: edit(inline.gfm.text)('{2,}', '*')())\n\n###\n# Inline Lexer & Compiler\n###\nclass InlineLexer\n  ###\n  # Expose Inline Rules\n  ###\n  @rules: inline\n  @output: (src, options)->\n    new InlineLexer(options, options).output src\n\n  @escapes: (text)->\n    text?.replace(InlineLexer.rules._escapes, '$1') or text\n\n  constructor: ({ @notes, @links, @abbrs, @abbrs_reg }, options)->\n    @options = options or marked.defaults\n    @rules = inline.normal\n    @renderer = @options.renderer or new Renderer\n    @renderer.options = @options\n    if !@notes\n      throw new Error('Tokens array requires a `notes` property.')\n    if !@links\n      throw new Error('Tokens array requires a `links` property.')\n\n    if @options.gfm\n      if @options.breaks\n        @rules = inline.breaks\n      else\n        @rules = inline.gfm\n\n    if ! @options.em\n      @rules.em = noop\n\n  output: (src)->\n    out = []\n    out.plain = \"\"\n    while src\n      # escape\n      if cap = @rules.escape.exec src\n        # console.log 'escape', cap\n        src = src[cap[0].length ..]\n        text = cap[1]\n        out.push text\n        out.plain += text\n        continue\n\n      # autolink\n      if cap = @rules.autolink.exec src\n        # console.log 'autolink', cap\n        src = src[cap[0].length ..]\n        if cap[2] == '@'\n          text = cap[1]\n          href = 'mailto:' + text\n        else\n          text = cap[1]\n          href = text\n        out.push @outputLargeBrackets { text }, { href }\n        out.plain += text\n        continue\n\n      # url (gfm)\n      if !@inLink and (cap = @rules.url.exec src)\n        # console.log 'url (gfm)', cap\n        cap[0] = @rules._backpedal.exec(cap[0])[0]\n        src = src[cap[0].length ..]\n        if cap[2] == '@'\n          text = cap[0]\n          href = 'mailto:' + text\n        else\n          text = cap[0]\n          if cap[1] == 'www.'\n            href = 'http://' + text\n          else\n            href = text\n        out.push @outputLargeBrackets { text }, { href }\n        out.plain += text\n        continue\n\n      # strong\n      if cap = @rules.strong.exec src\n        # console.log 'strong', cap\n        src = src[cap[0].length ..]\n        method = \n          switch cap[0][1]\n            when '_', '*'\n              'strong'\n            when '-'\n              # strikeout (markdown-it)\n              'strikeout'\n            when ':'\n              # span (markdown-it)\n              'span'\n            when '+'\n              # ins (markdown-it)\n              'ins'\n            when '['\n              # kbd (markdown-it)\n              'kbd'\n            when '~'\n              # del (gfm)\n              'del'\n            when '='\n              # Mark (markdown preview enhanced extended syntax)\n              'mark'\n        text = @output cap[0][2...-2]\n        out.push @renderer[method] text\n        out.plain += text.plain\n        continue\n\n      # tag\n      if cap = @rules.tag.exec src\n        # console.log 'tag', cap\n        if !@inLink and /^<a /i.test(cap[0])\n          @inLink = true\n        else if @inLink and /^<\\/a>/i.test(cap[0])\n          @inLink = false\n        src = src[cap[0].length ..]\n        text = cap[0]\n        out.plain += text\n        out.push (\n          if @options.sanitize\n            if @options.sanitizer\n            then @options.sanitizer text\n            else text\n          else\n            text\n        )\n        continue\n\n      # link\n      if cap = @rules.link.exec src\n        # console.log 'link', cap\n        src = src[cap[0].length ..]\n        mark = cap[0].charAt(0)\n        if mark == '!'\n          text = cap[1]\n        else\n          @inLink = true\n          text = @output cap[1]\n          @inLink = false\n\n        href = InlineLexer.escapes cap[2].trim().replace /^<([\\s\\S]*)>$/, '$1'\n        title = InlineLexer.escapes cap[3]?.slice(1, -1) or ''\n\n        out.push @outputLargeBrackets { mark, text }, { href, title }\n        out.plain += text.plain\n        continue\n\n      # reflink, nolink\n      if (cap = @rules.reflink.exec src) or (cap = @rules.nolink.exec src)\n        # console.log 'ref|no link', cap\n        src = src[cap[0].length ..]\n        mark = cap[0].charAt(0)\n        link = (cap[2] or cap[1]).replace(/\\s+/g, ' ')\n        link = @links[link.toLowerCase()]\n        unless link?.href\n          out.push mark\n          out.plain += mark\n          src = cap[0][1 .. ] + src\n          continue\n        @inLink = true\n        text = @output cap[1]\n        @inLink = false\n        out.push @outputLargeBrackets { mark, text }, link\n        out.plain += text.plain\n        continue\n\n      # note\n      if cap = @rules.note.exec src\n        # console.log 'note', cap\n        src = src[cap[0].length ..]\n        text = @output cap[1]\n\n        @notes.push o = { text }\n        o.href = '#' + num = @notes.length\n        out.push @renderer.note num, text, text.plain\n        out.plain += text.plain\n        continue\n\n      # br\n      if cap = @rules.br.exec src\n        # console.log 'br', cap\n        src = src[cap[0].length ..]\n        out.push @renderer.br()\n        out.plain += \"\\n\"\n        continue\n\n      # em\n      if cap = @rules.em.exec src\n        # console.log 'em', cap\n        src = src[cap[0].length ..]\n        text = cap[6] or cap[5] or cap[4] or cap[3] or cap[2] or cap[1]\n        text = @output text, cap[0][0]\n        out.push @renderer.em text\n        out.plain += text.plain\n        continue\n\n      # sup, sub\n      if cap = @rules.supsub.exec src\n        # console.log 'supsub', cap\n        src = src[cap[0].length ..]\n        method = \n          switch cap[0][0]\n            when '^'\n              # sup (markdown-it)\n              'sup'\n            when '~'\n              # sub (markdown-it)\n              'sub'\n\n        text = @output cap[0][1...-1]\n        out.push @renderer[method] text, text.plain\n        out.plain += text.plain\n        continue\n\n      # code\n      if cap = @rules.code.exec src\n        # console.log 'code', cap\n        src = src[cap[0].length ..]\n        out.push @renderer.codespan cap[2], true\n        out.plain += cap[2]\n        continue\n\n      # mdi\n      if cap = @rules.mdi.exec src\n        # console.log 'mdi', cap\n        src = src[cap[0].length ..]\n        out.push @renderer.mdi cap[1]\n        out.plain += \"@\"\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        # console.log 'text', cap\n        src = src[cap[0].length ..]\n        text = cap[0]\n        out.plain += text\n        if @abbrs_reg\n          for s in text.split @abbrs_reg\n            o = @abbrs[s]\n            text = @smartypants s\n            if o\n              out.push @renderer.abbr text, o.title\n            else\n              out.push @renderer.text text\n        else\n          out.push @renderer.text text\n        continue\n\n      if src\n        throw new Error 'Infinite loop on byte: ' + src.charCodeAt(0)\n    out\n\n  outputLargeBrackets: ({ mark, text }, { href = '', title = '' })->\n    if @options.sanitize\n      try\n        prot =\n          decodeURIComponent unescape href\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      catch e\n        return text\n      if prot.indexOf('javascript:') == 0 or prot.indexOf('vbscript:') == 0 or prot.indexOf('data:') == 0\n        return text\n\n    if @options.baseUrl && ! originIndependentUrl.test(href)\n      base = resolveUrl @options.baseUrl, href\n    url = @renderer.url href, base\n    switch mark\n      when '!'\n        @renderer.image url, title, text\n      else\n        @renderer.link url, title, text\n\n  smartypants: (text)->\n    if !@options.smartypants\n      return text\n    text\n    # markdown-it replacements\n    .replace /\\+\\-/g, '\\u00B1'\n    # markdown-it replacements\n    .replace /\\+\\-/g, '\\u00B1'\n    # em-dashes\n    .replace /---/g, '\\u2014'\n    # en-dashes\n    .replace /--/g, '\\u2013'\n    # opening singles\n    .replace /(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018'\n    # closing singles & apostrophes\n    .replace /'/g, '\\u2019'\n    # opening doubles\n    .replace /(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c'\n    # closing doubles\n    .replace /\"/g, '\\u201d'\n    # ellipses\n    .replace /\\.{3}/g, '\\u2026'\n\n\n# Renderer\nclass Renderer\n  constructor: (@options)->\n\n  container: (text, lang)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<div class=\"#{ lang }\">#{ text }</div>\"\"\"\n\n  code: (code, lang, escaped)->\n    if @options.highlight\n      out = @options.highlight(code, lang)\n      if out? and out != code\n        escaped = true\n        code = out\n    unless escaped\n      code = escape code\n    if lang\n      lang = @options.langPrefix + escape(lang, true)\n      \"\"\"<pre><code class=\"#{ lang }\">#{ code }</code></pre>\"\"\"\n    else\n      \"\"\"<pre><code>#{ code }</code></pre>\"\"\"\n\n  blockquote: (quote)->\n    quote = quote.join(\"\")\n    \"\"\"<blockquote>#{ quote }</blockquote>\"\"\"\n\n  html: (html)->\n    html = html.join(\"\") if html?.join\n    html\n\n  heading: (text, level, raw)->\n    text = text.join(\"\") if text?.join\n    if @options.headerIds\n      id = @options.headerPrefix + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      \"\"\"<h#{level} id=\"#{ id }\">#{ text }</h#{level}>\"\"\"\n    else\n      \"\"\"<h#{level}>#{ text }</h#{level}>\"\"\"\n\n  hr: ->\n    '<hr />'\n\n  list: (body, ordered, start, taskList)->\n    body = body.join(\"\")\n    type =\n      if ordered\n      then \"ol\"\n      else \"ul\"\n    classNames =\n      if taskList\n      then ''' class=\"task-list\"'''\n      else ''\n    start_at =\n      if ordered && start != 1\n      then \"\"\" start=\"#{start}\" \"\"\"\n      else ''\n    \"\"\"<#{type}#{start_at}#{classNames}>#{ body }</#{type}>\"\"\"\n\n  listitem: (text, checked)->\n    text = text.join(\"\") if text?.join\n    if checked?\n      attr =\n        if checked\n        then \" checked=\\\"\\\" disabled=\\\"\\\"\"\n        else \" disabled=\\\"\\\"\"\n      \"\"\"<li><input#{attr} type=\"checkbox\">#{text}</li>\"\"\"\n    else\n      \"\"\"<li>#{ text }</li>\"\"\"\n\n  paragraph: (text, is_top)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<p>#{ text }</p>\"\"\"\n\n  table: (header, body)->\n    body = body.join(\"\")\n    \"\"\"<table><thead>#{ header }</thead><tbody>#{ body }</tbody></table>\"\"\"\n\n  tablerow: (content)->\n    content = content.join(\"\")\n    \"\"\"<tr>#{ content }</tr>\"\"\"\n\n  tablecell: (content, flags)->\n    content = content.join(\"\")\n    style =\n      if flags.align\n      then \" align=\\\"#{ flags.align }\\\" \"\n      else ''\n    if flags.header\n    then \"\"\"<th#{ style }>#{ content }</th>\"\"\"\n    else \"\"\"<td#{ style }>#{ content }</td>\"\"\"\n\n  # span level renderer\n  strong: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<strong>#{ text }</strong>\"\"\"\n\n  mdi: (name)->\n    \"\"\"<i class=\"mdi #{name}\"></i>\"\"\"\n\n  strikeout: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<s>#{ text }</s>\"\"\"\n\n  span: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<span>#{ text }</span>\"\"\"\n\n  ins: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<ins>#{ text }</ins>\"\"\"\n\n  kbd: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<kbd>#{ text }</kbd>\"\"\"\n\n  abbr: (text, title)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<abbr title=\"#{title}\">#{ text }</abbr>\"\"\"\n\n  mark: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<mark>#{ text }</mark>\"\"\"\n\n  em: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<em>#{ text }</em>\"\"\"\n\n  sup: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<sup>#{ text }</sup>\"\"\"\n\n  sub: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<sub>#{ text }</sub>\"\"\"\n\n  codespan: (text)->\n    text = text.join(\"\") if text?.join\n    text = escape text\n    \"\"\"<code>#{ text }</code>\"\"\"\n\n  br: ->\n    '<br />'\n\n  del: (text)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<del>#{ text }</del>\"\"\"\n\n  note: (num, text, title)->\n    text = text.join(\"\") if text?.join\n    \"\"\"<sup class=\"note\" title=\"#{ title }\">#{ num }</sup>\"\"\"\n\n  link: (href, title, text)->\n    href = encodeURI href\n    text = text.join(\"\") if text?.join\n    if title\n      title = escape title\n      \"\"\"<a href=\"#{ href }\" title=\"#{ title }\">#{ text }</a>\"\"\"\n    else\n      \"\"\"<a href=\"#{ href }\">#{ text }</a>\"\"\"\n\n  image: (href, title, text)->\n    href = encodeURI href\n    text = text.join(\"\") if text?.join\n    if title\n      title = escape title\n      \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\" title=\"#{ title }\">\"\"\"\n    else\n      \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\">\"\"\"\n\n  text: (text)->\n    text = escape text\n    text\n\n  url: (href, base = \"\")->\n    decodeURIComponent \"#{base}#{href}\"\n\n\n# Parsing & Compiling\nclass Parser\n  @parse = (src, options, renderer)->\n    new Parser(options, renderer).parse src\n\n  constructor: (@options)->\n    @tokens = []\n    @token = null\n    { @renderer } = @options\n\n  parse: (src)->\n    { m } = @options\n    @inline = new InlineLexer src, @options\n    @tokens = src.reverse()\n    out = []\n    while @next()\n      out.push @tok()\n    if src.notes.length\n      out.push @renderer.hr()\n      notes = []\n      for { text } in src.notes\n        notes.push @renderer.listitem text \n      out.push @renderer.list notes, true, 1\n\n    tag = @options.tag\n    if tag\n      m tag, {}, out\n    else\n      out.join(\"\")\n\n  next: ->\n    @token = @tokens.pop()\n\n  peek: ->\n    @tokens[@tokens.length - 1] or 0\n\n  parseText: ->\n    body = @token.text\n    while @peek().type == 'text'\n      body += '\\n' + @next().text\n    @inline.output body\n\n  ###\n  # Parse Current Token\n  ###\n\n  tok: ->\n    switch @token.type\n      when 'space'\n        @token.text\n\n      when 'hr'\n        @renderer.hr()\n\n      when 'heading'\n        text = @inline.output(@token.text)\n        @renderer.heading(\n          text,\n          @token.depth,\n          text.plain\n        )\n\n      when 'container'\n        @renderer.container(@token.text, @token.lang)\n\n      when 'code'\n        @renderer.code(@token.text, @token.lang, @token.escaped)\n\n      when 'table'\n        cell = []\n        for o, i in @token.header\n          flags =\n            header: true\n            align: @token.align[i]\n          cell.push @renderer.tablecell @inline.output(o),\n            header: true\n            align: @token.align[i]\n        header = @renderer.tablerow(cell)\n\n        body = []\n        for row, i in @token.cells\n          cell = []\n          for _row, j in row\n            cell.push @renderer.tablecell @inline.output(_row),\n              header: false\n              align: @token.align[j]\n          body.push @renderer.tablerow(cell)\n        @renderer.table(header, body)\n\n      when 'blockquote_start'\n        { mode } = @token\n        body = []\n        while @next().type != 'blockquote_end'\n          body.push @tok()\n        @renderer.blockquote(body, mode)\n\n      when 'list_start'\n        { ordered, start } = @token\n        body = []\n        tasklist = false\n        while @next().type != 'list_end'\n          if @token.checked?\n            taskList = true\n          body.push @tok()\n        @renderer.list(body, ordered, start, taskList)\n\n      when 'list_item_start'\n        body = []\n        { checked } = @token\n        while @next().type != 'list_item_end'\n          if @token.type == 'text'\n          then body = [ ...body, ...@parseText() ]\n          else body.push @tok()\n        @renderer.listitem(body, checked)\n\n      when 'loose_item_start'\n        body = []\n        { checked } = @token\n        while @next().type != 'list_item_end'\n          body.push @tok()\n        @renderer.listitem(body, checked)\n\n      when 'html'\n        html =\n          if ! @token.pre\n            @inline.output(@token.text)\n          else\n            @token.text\n        @renderer.html(html)\n\n      when 'paragraph'\n        @renderer.paragraph @inline.output(@token.text), true\n\n      when 'text'\n        @renderer.paragraph @parseText(), @token.top\n\n# Marked\nmarked = (src, opt)->\n  # throw error in case of non string input\n  unless src\n    throw new Error('marked(): input parameter is undefined or null')\n  if typeof src != 'string'\n    txt = Object.prototype.toString.call(src)\n    throw new Error(\"marked(): input parameter is of type #{txt}, string expected\")\n\n  try\n    opt = Object.assign({}, marked.defaults, opt)\n    opt.renderer.options = opt\n\n    tokens = Lexer.lex(src, opt)\n    return Parser.parse tokens, opt\n  catch e\n    { m } = opt\n    e.message += '\\nPlease report this to https://github.com/7korobi/marked.'\n    if (opt or marked.defaults).silent\n      message = \"#{e.message}\"\n      return m 'p', {}, [\n        \"An error occured:\",\n        m 'pre', {}, message\n      ]\n    throw e\n\n\n# Options\nmarked.options =\nmarked.setOptions = (opt)->\n  Object.assign marked.defaults, opt\n  marked\n\nmarked.getDefaults = ->\n  m = (tag, { attrs }, children)->\n    attrs =\n      for key, val of attrs\n        \" #{key}=\\\"#{val}\\\"\"\n    \"<#{tag}#{attrs.join('')}>#{children.join('')}</#{tag}>\"\n\n  baseUrl: null\n  breaks: false\n  gfm: true\n  headerIds: true\n  headerPrefix: ''\n  highlight: null\n  langPrefix: 'language-'\n  mangle: true\n  pedantic: false\n  renderer: new Renderer\n  sanitize: false\n  sanitizer: null\n  silent: false\n  smartLists: false\n  smartypants: false\n  tables: true\n  xhtml: false\n\n  em: true\n  indentCode: true\n  taskLists: true\n  tag: null\n  m: m\n\nmarked.defaults = marked.getDefaults()\n\n\n# Expose\n\nmarked.Parser = Parser\nmarked.parser = Parser.parse\n\nmarked.Renderer = Renderer\n\nmarked.Lexer = Lexer\nmarked.lexer = Lexer.lex\n\nmarked.InlineLexer = InlineLexer\nmarked.inlineLexer = InlineLexer.output\n\nmarked.parse = marked\n\nmodule.exports = marked\n"
  ],
  "sourceRoot": ".."
}