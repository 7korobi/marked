{
  "version": 3,
  "file": "marked.js",
  "sourceRoot": "..",
  "sources": [
    "lib\\marked.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Helpers\n\nescape = (html, encode)->\n  amp =\n    if encode\n    then /&/g\n    else /&(?!#?\\w+;)/g\n  html\n  .replace amp,  '&amp;'\n  .replace /</g, '&lt;'\n  .replace />/g, '&gt;'\n  .replace /\"/g, '&quot;'\n  .replace /'/g, '&#39;'\n\nunescape = (html)->\n  # explicitly match decimal, hex, and named HTML entities\n  html.replace /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, (_, n)->\n    n = n.toLowerCase()\n    if n == 'colon'\n      return ':'\n    if n.charAt(0) == '#'\n      if n.charAt(1) == 'x'\n        String.fromCharCode parseInt n[2..], 16\n      else\n        String.fromCharCode parseInt n[1..]\n    else\n      ''\n\nresolveUrl = (base, href)->\n  key = ' ' + base\n  if ! baseUrls[key]\n    # we can ignore everything in base after the last slash of its path component,\n    # but we might need to add _that_\n    # https://tools.ietf.org/html/rfc3986#section-3\n    if /^[^:]+:\\/*[^/]*$/.test(base)\n      baseUrls[key] = base + '/'\n    else\n      baseUrls[key] = base.replace(/[^/]*$/, '')\n\n  base = baseUrls[key]\n\n  switch\n    when href[0..1] == '//'\n      base.replace(/:[\\s\\S]*/, ':') + href\n    when href.charAt(0) == '/'\n      base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href\n    else\n      base + href\n\nsplitCells = (tableRow, count)->\n  cells = tableRow.replace(/([^\\\\])\\|/g, '$1 |').split(/ +\\| */)\n  i = 0\n\n  if cells.length > count\n    cells.splice count\n  else\n    while cells.length < count\n      cells.push ''\n\n  for o, i in cells\n    cells[i] = o.replace(/\\\\\\|/g, '|')\n  cells\n\n\nbaseUrls = {}\noriginIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i\n\nnoop = ->\nnoop.exec = noop\n\nreplace = (regex, opt)->\n  regex = regex.source or regex\n  opt = opt or ''\n  self = (name, val)->\n    if !name\n      return new RegExp(regex, opt)\n    val = val.source or val\n    val = val.replace(/(^|[^\\[])\\^/g, '$1')\n    regex = regex.replace(name, val)\n    self\n  self\n\n###\n# Block Lexer\n###\nblock =\n  fences: noop\n  table: noop\n  newline: /^ *\\n+/\n  code: /^( {4}[^\\n]+\\n*)+/\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n|$)/\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n|$)/\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/\n  checkbox: /^\\[([ xX])\\] +/\n  html: ///\n    ^\\ {0,3}(?: # optional indentation\n    <(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$) # (1)\n    |comment[^\\n]*(\\n+|$) # (2)\n    |<\\?[\\s\\S]*?\\?>\\n* # (3)\n    |<![A-Z][\\s\\S]*?>\\n* # (4)\n    |<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n* # (5)\n    |</?(tag)(?:\\ +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$) # (6)\n    |<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*?\\ */?>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$) # (7) open tag\n    |</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=\\h*\\n)[\\s\\S]*?(?:\\n{2,}|$) # (7) closing tag\n    )\n  ///\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n|$)/\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n|$)/\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/\n  text: /^[^\\n]+/\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/\nblock.def = replace(block.def\n)( 'label', block._label\n)( 'title', block._title\n)()\n\nblock.with_bullet = /^ *([*+-]|\\d+\\.) +/\nblock.bullet = /(?:[*+-]|\\d+\\.)/\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\nblock.item = replace(block.item, 'gm'\n)( /bull/g, block.bullet\n)()\n\nblock.list = replace(block.list\n)( /bull/g, block.bullet\n)( 'hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n|$))'\n)( 'def', '\\\\n+(?=' + block.def.source + ')'\n)()\n\nblock._tag = ///\n  address|article|aside|base|basefont|blockquote|body|caption\n  |center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption\n  |figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe\n  |legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option\n  |p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr\n  |track|ul\n///\n\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/\nblock.html = replace(block.html, 'i'\n)( 'comment', block._comment\n)( 'tag', block._tag\n)('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/\n)()\n\nblock.paragraph = replace(block.paragraph\n)( 'hr', block.hr\n)( 'heading', block.heading\n)( 'lheading', block.lheading\n)( 'tag', block._tag\n)()\n\nblock.blockquote = replace(block.blockquote\n)( 'paragraph', block.paragraph\n)()\n\n###\n# Normal Block Grammar\n###\nblock.normal = Object.assign {}, block\n\n###\n# GFM Block Grammar\n###\nblock.gfm = Object.assign {}, block.normal,\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n|$)/\n  paragraph: /^/\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n|$)/\n\nblock.gfm.paragraph = replace(block.paragraph\n)( '(?!', \"(?!#{\n  block.gfm.fences.source.replace('\\\\1', '\\\\2')\n}|#{\n  block.list.source.replace('\\\\1', '\\\\3')\n}|\"\n)()\n\n###\n# GFM + Tables Block Grammar\n###\nblock.tables = Object.assign {}, block.gfm,\n  table: /^ *(.*\\|.*) *\\n *((\\|?) *:?-+:? *(?:\\| *:?-+:? *)*(\\|?))(?:\\n *((?:\\3.*[^>\\n ].*\\4(?:\\n|$))*)|$)/\n\nclass Lexer\n  @rules: block\n  @lex: (src, options)->\n    new Lexer(options).lex(src)\n\n  constructor: (@options)->\n    @tokens = []\n    @tokens.notes = []\n    @tokens.links = {}\n    @rules = block.normal\n    if @options.gfm\n      @rules =\n        if @options.tables\n        then block.tables\n        else block.gfm\n\n  lex: (src)->\n    src = src\n    .replace /\\r\\n|\\r/g, '\\n'\n    .replace /\\t/g, '    '\n    .replace /\\u00a0/g, ' '\n    .replace /\\u2424/g, '\\n'\n    @token src, true\n\n  token: (src, top)->\n    while src\n      # newline\n      if cap = @rules.newline.exec src\n        src = src[cap[0].length ..]\n        if cap[0].length\n          @tokens.push\n            type: 'space'\n            text: cap[0]\n\n      # code\n      if @options.indentCode && cap = @rules.code.exec src\n        # console.log 'block code', cap\n        src = src[cap[0].length ..]\n        cap = cap[0].replace /^ {4}/gm, ''\n        @tokens.push\n          type: 'code'\n          text: cap\n        continue\n\n      # fences (gfm)\n      if cap = @rules.fences.exec src\n        # console.log 'block fences', cap\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'code'\n          lang: cap[2]\n          text: cap[3] or ''\n        continue\n\n      # heading\n      if cap = @rules.heading.exec src\n        # console.log 'block heading', cap\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth: cap[1].length\n          text: cap[2]\n        continue\n\n      # table no leading pipe (gfm)\n      if top and cap = @rules.table.exec src\n        src = src[cap[0].length ..]\n        trim = /^\\|? *|\\ *\\|? *$/g\n\n        header = splitCells cap[1].replace(trim, '')\n        align = cap[2].replace(trim, '').split(/ *\\| */)\n        cells = cap[5]?.replace(/\\n$/, '').split('\\n').map((o)=> o.replace(trim, '') ) ? []\n\n        item = { type: 'table', header, align, cells }\n        for o, i in align\n          align[i] =\n            if      /^ *-+: *$/.test o  then 'right'\n            else if /^ *:-+: *$/.test o then 'center'\n            else if /^ *:-+ *$/.test o  then 'left'\n            else                              null\n        for o, i in item.cells\n          cells[i] = splitCells o, item.align.length\n        @tokens.push item\n        continue\n\n      # hr\n      if cap = @rules.hr.exec src\n        # console.log 'block hr', cap\n        src = src[cap[0].length ..]\n        @tokens.push type: 'hr'\n        continue\n\n      # blockquote\n      if cap = @rules.blockquote.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'blockquote_start'\n        cap = cap[0].replace /^ *> ?/gm, ''\n        # Pass `top` to keep the current\n        # \"toplevel\" state. This is exactly\n        # how markdown.pl works.\n        @token cap, top, true\n        @tokens.push\n          type: 'blockquote_end'\n        continue\n\n      # list\n      if cap = @rules.list.exec src\n        # console.log 'block list', cap\n        src = src[cap[0].length ..]\n        bull = cap[2]\n        is_ordered = \".\" == bull.slice(-1)\n        @tokens.push\n          type: 'list_start'\n          ordered: is_ordered\n          start:\n            if is_ordered\n            then  +bull\n            else  ''\n        # Get each top-level item.\n        cap = cap[0].match(@rules.item)\n        next = false\n\n        l = cap.length\n        i = 0\n        while i < l\n          item = cap[i]\n          # Remove the list item's bullet\n          # so it is seen as the next token.\n          space = item.length\n          item = item.replace @rules.with_bullet, ''\n\n          # Outdent whatever the\n          # list item contains. Hacky.\n          if ~item.indexOf('\\n ')\n            space -= item.length\n            item = item.replace(///^\\ {1,#{ space }}///gm, '')\n\n          # Determine whether the next list item belongs here.\n          # Backpedal if it does not belong in this list.\n          if @options.smartLists and i != l - 1\n            b = block.bullet.exec(cap[i + 1])[0]\n            if bull != b and !(bull.length > 1 and b.length > 1)\n              src = cap[i + 1 ..].join('\\n') + src\n              i = l - 1\n\n          # Determine whether item is loose or not.\n          # Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          # for discount behavior.\n          loose = next or /\\n\\n(?!\\s*$)/.test(item)\n          if i != l - 1\n            next = item.charAt(item.length - 1) == '\\n'\n            if !loose\n              loose = next\n\n          # Check for task list items\n          checkbox = @rules.checkbox.exec item\n          checked =\n            if checkbox\n              item = item.replace @rules.checkbox, ''\n              checkbox[1] != ' '\n\n          type = if loose then 'loose_item_start' else 'list_item_start'\n          @tokens.push { checked, type, task: checked? }\n\n          # Recurse.\n          @token item, false\n          @tokens.push type: 'list_item_end'\n          i++\n        @tokens.push type: 'list_end'\n        continue\n\n      # html\n      if cap = @rules.html.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type:\n            if @options.sanitize\n            then 'paragraph'\n            else 'html'\n          pre: !@options.sanitizer and cap[1] in ['pre', 'script', 'style']\n          text: cap[0]\n        continue\n\n      # def\n      if top and cap = @rules.def.exec src\n        # console.log 'def', cap\n        src = src[cap[0].length ..]\n        if cap[3]\n          cap[3] = cap[3][1...-1]\n        tag = cap[1].toLowerCase()\n        @tokens.links[tag] ||=\n          href:  cap[2]\n          title: cap[3]\n        continue\n\n      # lheading\n      if cap = @rules.lheading.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth:\n            if cap[2] == '='\n            then 1\n            else 2\n          text: cap[1]\n        continue\n \n      # top-level paragraph\n      if top and cap = @rules.paragraph.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'paragraph'\n          text: cap[0]\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        # Top-level should never reach here.\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'text'\n          text: cap[0]\n          top: top\n        continue\n\n      if src\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n    @tokens\n\n\n###\n# Inline-Level Grammar\n###\ninline =\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/\n  url: noop\n  tag: ///\n     ^comment\n    |^</[a-zA-Z][\\w:-]*\\s*>                # self-closing tag\n    |^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?> # open tag\n    |^<\\?[\\s\\S]*?\\?>                       # processing instruction, e.g. <?php ?>\n    |^<![a-zA-Z]+\\s[\\s\\S]*?>               # declaration, e.g. <!DOCTYPE html>\n    |^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>             # CDATA section\n  ///\n\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/\n  reflink: ///\n    ^!?\\[(label)\\]\\[(?!\\s*\\])((?:\n       \\\\[\\[\\]]?\n      |[^\\[\\]\\\\]\n    )+)\\]\n  ///\n  nolink: ///\n    ^!?\\[(?!\\s*\\])((?:\n       \\[[^\\[\\]]*\\]\n      |\\\\[\\[\\]]\n      |[^\\[\\]]\n    )*)\\](?:\\[\\])?\n  ///\n  strong: ///\n    ^([_~*=])\\1(\n       [^\\s][\\s\\S]*?[^\\s]\n      |[^\\s]\n    )\\1\\1(?!\\1)\n  ///\n  em: ///\n     ^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)\n    |^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)\n    |^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)\n    |^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)\n    |^_([^\\s_])_(?!_)\n    |^\\*([^\\s*])\\*(?!\\*)\n  ///\n  code: /^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/\n  br: /^ {2,}\\n(?!\\s*$)/\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[`*-=]|\\b_| {2,}\\n|$)/\n\n  # extended\n  anker: /^\\w+-\\w+-\\w+-\\w+-\\w+|-\\w+-\\w+-\\w+|-\\w+-\\w+|-\\w+/\n  note: /^\\^\\[(label)\\]/\n  sup: /^\\^((?:[^\\s^]|\\^\\^)+?)\\^(?!\\^)/\n  sub: /^~((?:[^\\s~]|~~)+?)~(?!~)/\n\n\n  _escapes: /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g\n  _scheme: /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/\n  _email: ///\n    [a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+\n    (@)\n    [a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\n    (?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+\n    (?![-_])\n  ///\n\n  _attribute: /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/\n  _label: /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/\n  _href: ///\n    \\s*(\n       <(?:\n         \\\\[<>]?\n        |[^\\s<>\\\\]\n      )*>\n      |(?:\n         \\\\[()]?\n        |\\([^\\s\\x00-\\x1f()\\\\]*\\)\n        |[^\\s\\x00-\\x1f()\\\\]\n      )*?\n    )\n  ///\n  _title: /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/\n  _url_peice: ///\n      ^$\n    | ^mailto:\n    | :\\/\\/\n    | ^(\\.{0,2})[\\?\\#\\/]\n    | ^[\\w()%+:/]+$\n  ///ig\n\n\ninline.autolink = replace(inline.autolink\n)('scheme', inline._scheme\n)('email', inline._email\n)()\n\ninline.tag = replace(inline.tag\n)('comment', block._comment\n)('attribute', inline._attribute\n)()\n\ninline.link = replace(inline.link\n)('label', inline._label\n)('href', inline._href\n)('title', inline._title\n)()\n\ninline.reflink = replace(inline.reflink\n)('label', inline._label\n)()\n\ninline.note = replace(inline.note\n)('label', inline._label\n)()\n\n###\n# Normal Inline Grammar\n###\ninline.normal = Object.assign({}, inline)\n\n###\n# Pedantic Inline Grammar\n# -- bye --\n###\n\n###\n# GFM Inline Grammar\n###\ninline.gfm = Object.assign({}, inline.normal,\n  escape: replace(inline.escape)('])', '~|])')()\n  text: replace(inline.text)(']|', '~]|')('|', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|')()\n  url: replace(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)('email', inline._email)()\n\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/\n)\n\n###\n# GFM + Line Breaks Inline Grammar\n###\ninline.breaks = Object.assign({}, inline.gfm,\n  br: replace(inline.br)('{2,}', '*')()\n  text: replace(inline.gfm.text)('{2,}', '*')())\n\n###\n# Inline Lexer & Compiler\n###\nclass InlineLexer\n  ###\n  # Expose Inline Rules\n  ###\n  @rules: inline\n  @output: (src, options)->\n    new InlineLexer(options, options).output src\n\n  @escapes: (text)->\n    text?.replace(InlineLexer.rules._escapes, '$1') or text\n\n  constructor: ({ @notes, @links }, options)->\n    @options = options or marked.defaults\n    @rules = inline.normal\n    @renderer = @options.renderer or new Renderer\n    @renderer.options = @options\n    if !@notes\n      throw new Error('Tokens array requires a `notes` property.')\n    if !@links\n      throw new Error('Tokens array requires a `links` property.')\n    if @options.gfm\n      if @options.breaks\n        @rules = inline.breaks\n      else\n        @rules = inline.gfm\n\n  output: (src)->\n    out = ''\n    while src\n      # escape\n      if cap = @rules.escape.exec src\n        # console.log 'escape', cap\n        src = src[cap[0].length ..]\n        out += cap[1]\n        continue\n\n      # autolink\n      if cap = @rules.autolink.exec src\n        # console.log 'autolink', cap\n        src = src[cap[0].length ..]\n        if cap[2] == '@'\n          text = escape @mangle cap[1]\n          href = 'mailto:' + text\n        else\n          text = escape cap[1]\n          href = text\n        out += @outputLargeBrackets { text }, { href }\n        continue\n\n      ###\n      # anker\n      if cap = @rules.anker.exec src\n        # console.log 'anker', cap\n        src = src[cap[0].length ..]\n        out += @renderer.anker(cap[0])\n        continue\n      ###\n\n      # url (gfm)\n      if !@inLink and (cap = @rules.url.exec src)\n        # console.log 'url (gfm)', cap\n        cap[0] = @rules._backpedal.exec(cap[0])[0]\n        src = src[cap[0].length ..]\n        if cap[2] == '@'\n          text = escape cap[0]\n          href = 'mailto:' + text\n        else\n          text = escape cap[0]\n          if cap[1] == 'www.'\n            href = 'http://' + text\n          else\n            href = text\n        out += @outputLargeBrackets { text }, { href }\n        continue\n\n      # tag\n      if cap = @rules.tag.exec src\n        # console.log 'tag', cap\n        if !@inLink and /^<a /i.test(cap[0])\n          @inLink = true\n        else if @inLink and /^<\\/a>/i.test(cap[0])\n          @inLink = false\n        src = src[cap[0].length ..]\n        out += (\n          if @options.sanitize\n            if @options.sanitizer\n            then @options.sanitizer cap[0]\n            else escape cap[0]\n          else\n            cap[0]\n        )\n        continue\n\n      # link\n      if cap = @rules.link.exec src\n        # console.log 'link', cap\n        src = src[cap[0].length ..]\n        mark = cap[0].charAt(0)\n        if mark == '!'\n          text = escape cap[1]\n        else\n          @inLink = true\n          text = @output cap[1]\n          @inLink = false\n\n        href = InlineLexer.escapes cap[2]\n        title = InlineLexer.escapes cap[3]?.slice(1, -1) or ''\n\n        out += @outputLargeBrackets { mark, text }, { href, title }\n        continue\n\n      # reflink, nolink\n      if (cap = @rules.reflink.exec src) or (cap = @rules.nolink.exec src)\n        # console.log 'ref|no link', cap\n        src = src[cap[0].length ..]\n        mark = cap[0].charAt(0)\n        link = (cap[2] or cap[1]).replace(/\\s+/g, ' ')\n        link = @links[link.toLowerCase()]\n        if !link or !link.href\n          out += mark\n          src = cap[0][1 .. ] + src\n        else\n          if mark == '!'\n            text = escape cap[1]\n          else\n            @inLink = true\n            text = @output cap[1]\n            @inLink = false\n          out += @outputLargeBrackets { mark, text }, link\n        continue\n\n      # note\n      if cap = @rules.note.exec src\n        # console.log 'note', cap\n        src = src[cap[0].length ..]\n\n        @inLink = true\n        text = @output cap[1]\n        @inLink = false\n\n        @notes.push o = { text } \n        o.href = '#' + num = @notes.length\n        out += @renderer.note num, text\n        continue\n\n      # br\n      if cap = @rules.br.exec src\n        # console.log 'br', cap\n        src = src[cap[0].length ..]\n        out += @renderer.br()\n        continue\n\n      # strong\n      if cap = @rules.strong.exec src\n        # console.log 'strong', cap\n        src = src[cap[0].length ..]\n        method = \n          switch cap[1]\n            when '_', '*'\n              'strong'\n            when '~'\n              # del (gfm)\n              'del'\n            when '='\n              # Mark (markdown preview enhanced extended syntax)\n              'mark'\n        out += @renderer[method] @output cap[2]\n        continue\n\n      # em\n      if cap = @rules.em.exec src\n        # console.log 'em', cap\n        src = src[cap[0].length ..]\n        out += @renderer.em @output cap[6] or cap[5] or cap[4] or cap[3] or cap[2] or cap[1]\n        continue\n\n      # sup\n      if cap = @rules.sup.exec src\n        # console.log 'sup', cap\n        src = src[cap[0].length ..]\n        out += @renderer.sup @output cap[1]\n        continue\n\n      # sub\n      if cap = @rules.sub.exec src\n        # console.log 'sub', cap\n        src = src[cap[0].length ..]\n        out += @renderer.sub @output cap[1]\n        continue\n\n      # code\n      if cap = @rules.code.exec src\n        # console.log 'code', cap\n        src = src[cap[0].length ..]\n        out += @renderer.codespan escape cap[2], true\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        # console.log 'text', cap\n        src = src[cap[0].length ..]\n        out += @renderer.text escape @smartypants cap[0]\n        continue\n\n      if src\n        throw new Error 'Infinite loop on byte: ' + src.charCodeAt(0)\n    out\n\n  outputLargeBrackets: ({ mark, text }, link)->\n    { href = '', title = '' } = link\n    href &&= escape href\n    title &&= escape title\n\n    if @options.sanitize\n      try\n        prot =\n          decodeURIComponent unescape href\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      catch e\n        return text\n      if prot.indexOf('javascript:') == 0 or prot.indexOf('vbscript:') == 0 or prot.indexOf('data:') == 0\n        return text\n\n    if @options.baseUrl && ! originIndependentUrl.test(href)\n      href = resolveUrl @options.baseUrl, href\n\n    switch mark\n      when '!'\n        @renderer.image href, title, text\n      else\n        if @options.ruby && ! @rules._url_peice.exec href\n          @renderer.ruby href, title, text\n        else\n          href = encodeURI(href).replace /%25/g, '%'\n          @renderer.link href, title, text\n\n  smartypants: (text)->\n    if !@options.smartypants\n      return text\n    text\n    .replace /---/g, '—'\n    .replace /--/g, '–'\n    .replace /(^|[-\\u2014/(\\[{\"\\s])'/g, '$1‘'\n    .replace /'/g, '’'\n    .replace /(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1“'\n    .replace /\"/g, '”'\n    .replace /\\.{3}/g, '…'\n\n  mangle: (text)->\n    if !@options.mangle\n      return text\n    out = ''\n    for c, i in text\n      ch = text.charCodeAt(i)\n      if Math.random() > 0.5\n        ch = 'x' + ch.toString(16)\n      out += '&#' + ch + ';'\n    out\n\n\n# Renderer\nclass Renderer\n  constructor: (@options)->\n\n  code: (code, lang, escaped)->\n    if @options.highlight\n      out = @options.highlight(code, lang)\n      if out? and out != code\n        escaped = true\n        code = out\n    code =\n      if escaped\n      then code\n      else escape code, true\n    if lang\n      lang = @options.langPrefix + escape(lang, true)\n      \"\"\"<pre><code class=\"#{ lang }\">#{ code }</code></pre>\"\"\"\n    else\n      \"\"\"<pre><code>#{ code }</code></pre>\"\"\"\n\n  blockquote: (quote)->\n    \"\"\"<blockquote>#{ quote }</blockquote>\"\"\"\n\n  html: (html)->\n    html\n\n  heading: (text, level, raw)->\n    if @options.headerIds\n      id = @options.headerPrefix + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      \"\"\"<h#{level} id=\"#{ id }\">#{ text }</h#{level}>\"\"\"\n    else\n      \"\"\"<h#{level}>#{ text }</h#{level}>\"\"\"\n\n  hr: ->\n    '<hr>'\n\n  list: (body, ordered, start, taskList)->\n    type =\n      if ordered\n      then \"ol\"\n      else \"ul\"\n    classNames =\n      if taskList\n      then ''' class=\"task-list\"'''\n      else ''\n    start_at =\n      if ordered && start != 1\n      then \"\"\" start=\"#{start}\" \"\"\"\n      else ''\n    \"\"\"<#{type}#{start_at}#{classNames}>#{ body }</#{type}>\"\"\"\n\n  listitem: (text, checked)->\n    if checked?\n      attr =\n        if checked\n        then \" checked\"\n        else \"\"\n      \"\"\"<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\"#{attr}>#{text}</li>\"\"\"\n    else\n      \"\"\"<li>#{ text }</li>\"\"\"\n\n  paragraph: (text, is_top)->\n    if is_top\n      \"\"\"<p>#{ text }</p>\"\"\"\n    else\n      \"#{ text }\"\n\n  table: (header, body)->\n    \"\"\"<table><thead>#{ header }</thead><tbody>#{ body }</tbody></table>\"\"\"\n\n  tablerow: (content)->\n    \"\"\"<tr>#{ content }</tr>\"\"\"\n\n  tablecell: (content, flags)->\n    style =\n      if flags.align\n      then \"\"\"style=\"text-align:#{ flags.align }\" \"\"\"\n      else ''\n    if flags.header\n    then \"\"\"<th #{ style }>#{ content }</th>\"\"\"\n    else \"\"\"<td #{ style }>#{ content }</td>\"\"\"\n\n  # span level renderer\n  strong: (text)->\n    \"\"\"<strong>#{ text }</strong>\"\"\"\n\n  mark: (text)->\n    \"\"\"<abbr>#{ text }</abbr>\"\"\"\n\n  em: (text)->\n    \"\"\"<em>#{ text }</em>\"\"\"\n\n  sup: (text)->\n    \"\"\"<sup>#{ text }</sup>\"\"\"\n\n  sub: (text)->\n    \"\"\"<sub>#{ text }</sub>\"\"\"\n\n  codespan: (text)->\n    \"\"\"<code>#{ text }</code>\"\"\"\n\n  br: ->\n    '\\n'\n\n  del: (text)->\n    \"\"\"<del>#{ text }</del>\"\"\"\n\n  ruby: (ruby, title, text)->\n    if title\n      \"\"\"<span title=\"#{title}\"><ruby>#{text}<rp>《</rp><rt>#{ruby}</rt><rp>》</rp></ruby></span>\"\"\"\n    else\n      \"\"\"<ruby>#{text}<rp>《</rp><rt>#{ruby}</rt><rp>》</rp></ruby>\"\"\"\n\n  note: (num, title)->\n    \"\"\"<sup class=\"note\" title=\"#{ title }\">#{ num }</sup>\"\"\"\n\n  link: (href, title, text)->\n    if title\n    then \"\"\"<a href=\"#{ href }\" title=\"#{ title }\">#{ text }</a>\"\"\"\n    else \"\"\"<a href=\"#{ href }\">#{ text }</a>\"\"\"\n\n  image: (href, title, text)->\n    if title\n    then \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\" title=\"#{ title }\">\"\"\"\n    else \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\">\"\"\"\n\n  anker: (code)->\n    \"\"\"<q cite=\"#{code}\">--#{code}</q>\"\"\"\n\n  text: (text)->\n    text\n\n# returns only the textual part of the token\n# no need for block level renderers\nclass TextRenderer\n  f_nop = -> ''\n  f_text = (text)-> text\n  f_link = (href, title, text)-> \"#{text}\"\n  strong: f_text\n  em: f_text\n  codespan: f_text\n  del: f_text\n  text: f_text\n  note: f_text\n  link: f_link\n  ruby: f_link\n  image: f_link\n  br: f_nop\n\n# Parsing & Compiling\nclass Parser\n  @parse = (src, options, renderer)->\n    new Parser(options, renderer).parse src\n\n  constructor: (@options)->\n    @tokens = []\n    @token = null\n    { @renderer } = @options\n\n  parse: (src)->\n    @inline = new InlineLexer src, @options\n    # use an InlineLexer with a TextRenderer to extract pure text\n    @inlineText = new InlineLexer src, Object.assign {}, @options,\n      renderer: new TextRenderer\n    @tokens = src.reverse()\n    out = ''\n    while @next()\n      out += @tok()\n    if src.notes.length\n      out += @renderer.hr()\n      notes = \"\"\n      for { text } in src.notes\n        notes += @renderer.listitem text \n      out += @renderer.list notes, true, 1\n\n    tag = @options.tag\n    if tag\n      out = \"\"\"<#{tag}>#{out}</#{tag}>\"\"\"\n    out\n\n  next: ->\n    @token = @tokens.pop()\n\n  peek: ->\n    @tokens[@tokens.length - 1] or 0\n\n  parseText: ->\n    body = @token.text\n    while @peek().type == 'text'\n      body += '\\n' + @next().text\n    @inline.output body\n\n  ###*\n  # Parse Current Token\n  ###\n\n  tok: ->\n    switch @token.type\n      when 'space'\n        @token.text\n\n      when 'hr'\n        @renderer.hr()\n\n      when 'heading'\n        @renderer.heading(\n          @inline.output(@token.text),\n          @token.depth,\n          unescape @inlineText.output @token.text\n        )\n\n      when 'code'\n        @renderer.code(@token.text, @token.lang, @token.escaped)\n\n      when 'table'\n        cell = ''\n        for o, i in @token.header\n          flags =\n            header: true\n            align: @token.align[i]\n          cell += @renderer.tablecell @inline.output(o),\n            header: true\n            align: @token.align[i]\n        header = @renderer.tablerow(cell)\n\n        body = ''\n        for row, i in @token.cells\n          cell = ''\n          for _row, j in row\n            cell += @renderer.tablecell @inline.output(_row),\n              header: false\n              align: @token.align[j]\n          body += @renderer.tablerow(cell)\n        @renderer.table(header, body)\n\n      when 'blockquote_start'\n        body = ''\n        while @next().type != 'blockquote_end'\n          body += @tok()\n        @renderer.blockquote(body)\n\n      when 'list_start'\n        { ordered, start } = @token\n        body = ''\n        tasklist = false\n        while @next().type != 'list_end'\n          if @token.checked?\n            taskList = true\n          body += @tok()\n        @renderer.list(body, ordered, start, taskList)\n\n      when 'list_item_start'\n        body = ''\n        { checked } = @token\n        while @next().type != 'list_item_end'\n          body +=\n            if @token.type == 'text'\n            then @parseText()\n            else @tok()\n        @renderer.listitem(body, checked)\n\n      when 'loose_item_start'\n        body = ''\n        { checked } = @token\n        while @next().type != 'list_item_end'\n          body += @tok()\n        @renderer.listitem(body, checked)\n\n      when 'html'\n        html =\n          if ! @token.pre\n            @inline.output(@token.text)\n          else\n            @token.text\n        @renderer.html(html)\n\n      when 'paragraph'\n        @renderer.paragraph @inline.output(@token.text), true\n\n      when 'text'\n        @renderer.paragraph @parseText(), @token.top\n\n# Marked\nmarked = (src, opt)->\n  # throw error in case of non string input\n  unless src\n    throw new Error('marked(): input parameter is undefined or null')\n  if typeof src != 'string'\n    txt = Object.prototype.toString.call(src)\n    throw new Error(\"marked(): input parameter is of type #{txt}, string expected\")\n\n  try\n    opt = Object.assign({}, marked.defaults, opt)\n    opt.renderer.options = opt\n\n    tokens = Lexer.lex(src, opt)\n    return Parser.parse tokens, opt\n  catch e\n    e.message += '\\nPlease report this to https://github.com/7korobi/marked.'\n    if (opt or marked.defaults).silent\n      message = escape(e.message + '', true)\n      return \"<p>An error occured:</p><pre>#{message}</pre>\"\n    throw e\n\n\n###\n  if callback\n    opt = Object.assign({}, marked.defaults, opt)\n    { highlight } = opt\n\n    try\n      tokens = Lexer.lex(src, opt, links)\n    catch e\n      return callback(e)\n    pending = tokens.length\n\n    done = (err)->\n      if err\n        opt.highlight = highlight\n        return callback(err)\n\n      try\n        out = Parser.parse(tokens, opt)\n      catch e\n        err = e\n      opt.highlight = highlight\n      if err\n      then callback(err)\n      else callback(null, out)\n\n    if !highlight or highlight.length < 3\n      return done()\n\n    delete opt.highlight\n\n    if !pending\n      return done()\n\n    tokens.map (token)->\n      if token.type != 'code'\n        return --pending or done()\n      highlight token.text, token.lang, (err, code)->\n        if err\n          return done(err)\n        if code in [null, token.text]\n          return --pending or done()\n        token.text = code\n        token.escaped = true\n        --pending or done()\n        return\n      return\n    return\n###\n\n# Options\nmarked.options =\nmarked.setOptions = (opt)->\n  Object.assign marked.defaults, opt\n  marked\n\nmarked.getDefaults = ->\n  tag: null\n  gfm: true\n  ruby: false\n  tables: true\n  indentCode: true\n  taskLists: true\n  breaks: false\n  sanitize: false\n  sanitizer: null\n  mangle: true\n  smartLists: false\n  silent: false\n  highlight: null\n  langPrefix: 'language-'\n  smartypants: false\n  headerIds: true\n  headerPrefix: ''\n  renderer: new Renderer\n  xhtml: false\n  baseUrl: null\nmarked.defaults = marked.getDefaults()\n\n\n# Expose\n\nmarked.Parser = Parser\nmarked.parser = Parser.parse\n\nmarked.Renderer = Renderer\nmarked.TextRenderer = TextRenderer\n\nmarked.Lexer = Lexer\nmarked.lexer = Lexer.lex\n\nmarked.InlineLexer = InlineLexer\nmarked.inlineLexer = InlineLexer.output\n\nmarked.parse = marked\n\nmodule.exports = marked\n"
  ]
}