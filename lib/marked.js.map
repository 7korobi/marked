{
  "version": 3,
  "file": "marked.js",
  "sourceRoot": "..",
  "sources": [
    "lib\\marked.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Helpers\n\nescape = (html, encode) ->\n  amp =\n    if encode \n    then /&/g\n    else /&(?!#?\\w+;)/g\n  html\n  .replace amp,  '&amp;'\n  .replace /</g, '&lt;'\n  .replace />/g, '&gt;'\n  .replace /\"/g, '&quot;'\n  .replace /'/g, '&#39;'\n\nunescape = (html) ->\n  # explicitly match decimal, hex, and named HTML entities \n  html.replace /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, (_, n) ->\n    n = n.toLowerCase()\n    if n == 'colon'\n      return ':'\n    if n.charAt(0) == '#'\n      return if n.charAt(1) == 'x' then String.fromCharCode(parseInt(n.substring(2), 16)) else String.fromCharCode(+n.substring(1))\n    ''\n\nreplace = (regex, opt) ->\n  regex = regex.source\n  opt = opt or ''\n  self = (name, val) ->\n    if !name\n      return new RegExp(regex, opt)\n    val = val.source or val\n    val = val.replace(/(^|[^\\[])\\^/g, '$1')\n    regex = regex.replace(name, val)\n    self\n  self\n\nnoop = ->\nnoop.exec = noop\n\n\n# Block Lexer\nblock = \n  newline: /^\\n+/\n  code: /^( {4}[^\\n]+\\n*)+/\n  fences: noop\n  hr: /^( *[-*_]){3,} *(?:\\n|$)/\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n|$)/\n  nptable: noop\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n|$)/\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/\n  list: /^( *)(bull)[\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull)\\n*|\\s*$)/\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n|$)/\n  table: noop\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/\n  text: /^[^\\n]+/\n\nblock.bullet = /(?:[*+-] |\\d+\\.)/\nblock.item = /^( *)(bull)[^\\n]*(?:\\n(?!\\1bull)[^\\n]*)*/\nblock.item = replace(block.item, 'gm'\n)( /bull/g, block.bullet\n)()\n\nblock.list = replace(block.list\n)( /bull/g, block.bullet\n)( 'hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))'\n)( 'def', '\\\\n+(?=' + block.def.source + ')'\n)()\n\nblock.blockquote = replace(block.blockquote\n)( 'def', block.def\n)()\n\nblock._tag = ('(?!(?:'\n)+( 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n)+( '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n)+( '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b'\n)\n\nblock.html = replace(block.html\n)( 'comment', /<!--[\\s\\S]*?-->/\n)( 'closed', /<(tag)[\\s\\S]+?<\\/\\1>/\n)( 'closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/\n)( /tag/g, block._tag\n)()\n\nblock.paragraph = replace(block.paragraph\n)( 'hr', block.hr\n)( 'heading', block.heading\n)( 'lheading', block.lheading\n)( 'blockquote', block.blockquote\n)( 'tag', '<' + block._tag\n)( 'def', block.def\n)()\n\n# Normal Block Grammar\nblock.normal = Object.assign {}, block\n\n# GFM Block Grammar\nblock.gfm = Object.assign {}, block.normal,\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(\\n|$)/\n  paragraph: /^/\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(\\n|$)/\n  checkbox: /^\\[([ x])\\] +/\n\nblock.gfm.paragraph = replace(block.paragraph\n)( '(?!', '(?!'\n  + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|' \n  + block.list.source.replace('\\\\1', '\\\\3') + '|'\n)()\n\n# GFM + Tables Block Grammar\n\nblock.tables = Object.assign {}, block.gfm,\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n\n\nclass Lexer\n  @rules: block\n  @lex: (src, options) ->\n    new Lexer(options).lex(src)\n\n  constructor: (options)->\n    @tokens = []\n    @tokens.links = {}\n    @options = options or marked.defaults\n    @rules = block.normal\n    if @options.gfm\n      @rules =\n        if @options.tables\n        then block.tables\n        else block.gfm\n\n  lex: (src) ->\n    src = src\n    .replace /\\r\\n|\\r/g, '\\n'\n    .replace /\\t/g, '    '\n    .replace /\\u00a0/g, ' '\n    .replace /\\u2424/g, '\\n'\n    @token src, true\n\n  token: (src, top, bq) ->\n    src = src.replace(/^ +$/gm, '')\n    while src\n      # newline\n      if cap = @rules.newline.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'space'\n          text: cap[0]\n\n      # code\n      if cap = @rules.code.exec src\n        src = src[cap[0].length ..]\n        cap = cap[0].replace /^ {4}/gm, ''\n        @tokens.push\n          type: 'code'\n          text: cap\n        continue\n\n      # fences (gfm)\n      if cap = @rules.fences.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'code'\n          lang: cap[2]\n          text: cap[3] or ''\n        continue\n\n      # heading\n      if cap = @rules.heading.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth: cap[1].length\n          text: cap[2]\n        continue\n\n      # table no leading pipe (gfm)\n      if top and cap = @rules.nptable.exec src\n        src = src[cap[0].length ..]\n        item =\n          type: 'table'\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */)\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */)\n          cells: cap[3].replace(/\\n$/, '').split('\\n')\n        for o, i in item.align\n          item.align[i] =\n            if      /^ *-+: *$/.test o  then 'right'\n            else if /^ *:-+: *$/.test o then 'center'\n            else if /^ *:-+ *$/.test o  then 'left'\n            else                              null\n        for o, i in item.cells\n          item.cells[i] = o.split(/ *\\| */)\n        @tokens.push item\n        continue\n\n      # lheading\n      if cap = @rules.lheading.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'heading'\n          depth:\n            if cap[2] == '='\n            then 1\n            else 2\n          text: cap[1]\n        continue\n \n      # hr\n      if cap = @rules.hr.exec src\n        src = src[cap[0].length ..]\n        @tokens.push type: 'hr'\n        continue\n\n      # blockquote\n      if cap = @rules.blockquote.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'blockquote_start'\n        cap = cap[0].replace /^ *> ?/gm, ''\n        # Pass `top` to keep the current\n        # \"toplevel\" state. This is exactly\n        # how markdown.pl works.\n        @token cap, top, true\n        @tokens.push\n          type: 'blockquote_end'\n        continue\n\n      # list\n      if cap = @rules.list.exec src\n        src = src[cap[0].length ..]\n        bull = cap[2]\n        @tokens.push\n          type: 'list_start'\n          ordered: \".\" == bull.slice(-1)\n        # Get each top-level item.\n        cap = cap[0].match(@rules.item)\n        next = false\n\n        l = cap.length\n        i = 0\n        while i < l\n          item = cap[i]\n          # Remove the list item's bullet\n          # so it is seen as the next token.\n          space = item.length\n          item = item.replace /^ *([*+-]+ |(\\d+\\.)+)/, ''\n          # Outdent whatever the\n          # list item contains. Hacky.\n          if ~item.indexOf('\\n ')\n            space -= item.length\n            item = item.replace(///^\\ {1,#{ space }}///gm, '')\n          # Determine whether the next list item belongs here.\n          # Backpedal if it does not belong in this list.\n          if @options.smartLists and i != l - 1\n            b = block.bullet.exec(cap[i + 1])[0]\n            if bull != b and !(bull.length > 1 and b.length > 1)\n              src = cap[i + 1 ..].join('\\n') + src\n              i = l - 1\n          # Determine whether item is loose or not.\n          # Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          # for discount behavior.\n          loose = next or /\\n\\n(?!\\s*$)/.test(item)\n          if i != l - 1\n            next = item.charAt(item.length - 1) == '\\n'\n            if !loose\n              loose = next\n          @tokens.push type: if loose then 'loose_item_start' else 'list_item_start'\n          # Recurse.\n          @token item, false, bq\n          @tokens.push type: 'list_item_end'\n          i++\n        @tokens.push type: 'list_end'\n        continue\n\n      # html\n      if cap = @rules.html.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type:\n            if @options.sanitize\n            then 'paragraph'\n            else 'html'\n          pre: !@options.sanitizer and cap[1] in ['pre', 'script', 'style']\n          text: cap[0]\n        continue\n\n      # def\n      if !bq and top and cap = @rules.def.exec src\n        src = src[cap[0].length ..]\n        @tokens.links[cap[1].toLowerCase()] =\n          href:  cap[2]\n          title: cap[3]\n        continue\n\n      # table (gfm)\n      if top and cap = @rules.table.exec src\n        src = src[cap[0].length ..]\n        item =\n          type: 'table'\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */)\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */)\n          cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n        for o, i in item.align\n          item.align[i] =\n            if      /^ *-+: *$/.test(o)  then 'right'\n            else if /^ *:-+: *$/.test(o) then 'center'\n            else if /^ *:-+ *$/.test(o)  then 'left'\n            else                               null\n        for o, i in item.cells\n          item.cells[i] = o\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */)\n\n        @tokens.push item\n        continue\n\n      # top-level paragraph\n      if top and cap = @rules.paragraph.exec src\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'paragraph'\n          text: cap[0]\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        # Top-level should never reach here.\n        src = src[cap[0].length ..]\n        @tokens.push\n          type: 'text'\n          text: cap[0]\n        continue\n\n      if src\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n    @tokens\n\n\n# Inline Lexer & Compiler\ninline = \n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/\n  url: noop\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/\n  link: /^!?\\[(inside)\\]\\(href\\)/\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\n  br: /^ {2,}\\n(?!\\s*$)/\n  del: noop\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/\ninline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)()\ninline.reflink = replace(inline.reflink)('inside', inline._inside)()\n\n# Normal Inline Grammar\ninline.normal = Object.assign({}, inline)\n\n# GFM Inline Grammar\ninline.gfm = Object.assign({}, inline.normal,\n  escape: replace(inline.escape)('])', '~|])')()\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/\n  text: replace(inline.text)(']|', '~]|')('|', '|https?://|')())\n\n# GFM + Line Breaks Inline Grammar\ninline.breaks = Object.assign({}, inline.gfm,\n  br: replace(inline.br)('{2,}', '*')()\n  text: replace(inline.gfm.text)('{2,}', '*')(']|', '/]|')())\n\n# Expose Inline Rules\nclass InlineLexer\n  @rules: inline\n  @output: (src, links, options) ->\n    new InlineLexer(links, options).output src\n\n  constructor: (links, options) ->\n    @options = options or marked.defaults\n    @links = links\n    @rules = inline.normal\n    @renderer = @options.renderer or new Renderer\n    @renderer.options = @options\n    if !@links\n      throw new Error('Tokens array requires a `links` property.')\n    if @options.gfm\n      if @options.breaks\n        @rules = inline.breaks\n      else\n        @rules = inline.gfm\n\n  output: (src) ->\n    out = ''\n    while src\n      # escape\n      if cap = @rules.escape.exec src\n        src = src[cap[0].length ..]\n        out += cap[1]\n        continue\n\n      # autolink\n      if cap = @rules.autolink.exec src\n        src = src[cap[0].length ..]\n        if cap[2] == '@'\n          text =\n            if cap[1].charAt(6) == ':'\n            then @mangle(cap[1][7..])\n            else @mangle(cap[1])\n          href = @mangle('mailto:') + text\n        else\n          text = escape(cap[1])\n          href = text\n        out += @renderer.link(href, null, text)\n        continue\n\n      # url (gfm)\n      if !@inLink and (cap = @rules.url.exec src)\n        src = src[cap[0].length ..]\n        text = escape(cap[1])\n        href = text\n        out += @renderer.link(href, null, text)\n        continue\n\n      # tag\n      if cap = @rules.tag.exec src\n        if !@inLink and /^<a /i.test(cap[0])\n          @inLink = true\n        else if @inLink and /^<\\/a>/i.test(cap[0])\n          @inLink = false\n        src = src[cap[0].length ..]\n        out += (\n          if @options.sanitize\n            if @options.sanitizer \n            then @options.sanitizer(cap[0]) \n            else escape(cap[0])\n          else\n            cap[0]\n        )\n        continue\n\n      # link\n      if cap = @rules.link.exec src\n        src = src[cap[0].length ..]\n        @inLink = true\n        out += @outputLink cap,\n          href:  cap[2]\n          title: cap[3]\n        @inLink = false\n        continue\n\n      # reflink, nolink\n      if (cap = @rules.reflink.exec src) or (cap = @rules.nolink.exec  src)\n        link = (cap[2] or cap[1]).replace(/\\s+/g, ' ')\n        link = @links[link.toLowerCase()]\n        if !link or !link.href\n          src = src[1 ..]\n          out += cap[0].charAt(0)\n        else\n          src = src[cap[0].length ..]\n          @inLink = true\n          out += @outputLink(cap, link)\n          @inLink = false\n        continue\n\n      # strong\n      if cap = @rules.strong.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.strong @output cap[2] or cap[1]\n        continue\n\n      # em\n      if cap = @rules.em.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.em @output cap[2] or cap[1]\n        continue\n\n      # code\n      if cap = @rules.code.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.codespan escape cap[2], true\n        continue\n\n      # br\n      if cap = @rules.br.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.br()\n        continue\n\n      # del (gfm)\n      if cap = @rules.del.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.del @output cap[1]\n        continue\n\n      # text\n      if cap = @rules.text.exec src\n        src = src[cap[0].length ..]\n        out += @renderer.text escape @smartypants cap[0]\n        continue\n\n      if src\n        throw new Error 'Infinite loop on byte: ' + src.charCodeAt(0)\n    out\n\n  outputLink: (cap, link) ->\n    href = escape(link.href)\n    title =\n      if link.title\n      then escape(link.title)\n      else null\n    if cap[0].charAt(0) != '!'\n      @renderer.link href, title, @output cap[1]\n    else\n      @renderer.image href, title, escape cap[1]\n\n  smartypants: (text) ->\n    if !@options.smartypants\n      return text\n    text\n    .replace /---/g, '—'\n    .replace /--/g, '–'\n    .replace /(^|[-\\u2014/(\\[{\"\\s])'/g, '$1‘'\n    .replace /'/g, '’'\n    .replace /(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1“'\n    .replace /\"/g, '”'\n    .replace /\\.{3}/g, '…'\n\n  mangle: (text) ->\n    if !@options.mangle\n      return text\n    out = ''\n    for c, i in text\n      ch = text.charCodeAt(i)\n      if Math.random() > 0.5\n        ch = 'x' + ch.toString(16)\n      out += '&#' + ch + ';'\n    out\n\n\n# Renderer\nclass Renderer\n  constructor: (options) ->\n    @options = options or {}\n\n  code: (code, lang, escaped) ->\n    if @options.highlight\n      out = @options.highlight(code, lang)\n      if out? and out != code\n        escaped = true\n        code = out\n    code =\n      if escaped\n      then code\n      else escape code, true\n    if lang\n      lang = @options.langPrefix + escape(lang, true)\n      \"\"\"<pre><code class=\"#{ lang }\">#{ code }</code></pre>\"\"\"\n    else\n      \"\"\"<pre><code>#{ code }</code></pre>\"\"\"\n\n  blockquote: (quote) ->\n    \"\"\"<blockquote>#{ quote }</blockquote>\"\"\"\n\n  html: (html) ->\n    html\n\n  heading: (text, level, raw) ->\n    id = @options.headerPrefix + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    \"\"\"<h#{level} id=\"#{ id }\">#{ text }</h#{level}>\"\"\"\n\n  hr: ->\n    '<hr>'\n\n  list: (body, ordered) ->\n    if ordered\n    then \"\"\"<ol>#{ body }</ol>\"\"\"\n    else \"\"\"<ul>#{ body }</ul>\"\"\"\n\n  listitem: (text) ->\n    \"\"\"<li>#{ text }</li>\"\"\"\n\n  paragraph: (text) ->\n    \"\"\"<p>#{ text }</p>\"\"\"\n\n  table: (header, body) ->\n    \"\"\"<table><thead>#{ header }</thead><tbody>#{ body }</tbody></table>\"\"\"\n\n  tablerow: (content) ->\n    \"\"\"<tr>#{ content }</tr>\"\"\"\n\n  tablecell: (content, flags) ->\n    style =\n      if flags.align\n      then \"\"\"style=\"text-align:#{ flags.align }\" \"\"\"\n      else ''\n    if flags.header\n    then \"\"\"<th #{ style }>#{ content }</th>\"\"\"\n    else \"\"\"<td #{ style }>#{ content }</td>\"\"\"\n\n  # span level renderer\n  strong: (text) ->\n    \"\"\"<strong>#{ text }</strong>\"\"\"\n\n  em: (text) ->\n    \"\"\"<em>#{ text }</em>\"\"\"\n\n  codespan: (text) ->\n    \"\"\"<code>#{ text }</code>\"\"\"\n\n  br: ->\n    '\\n'\n\n  del: (text) ->\n    \"\"\"<del>#{ text }</del>\"\"\"\n\n  link: (href, title, text) ->\n    if @options.sanitize\n      try\n        prot =\n          decodeURIComponent(unescape(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      catch e\n        return ''\n      if prot.indexOf('javascript:') == 0 or prot.indexOf('vbscript:') == 0 or prot.indexOf('data:') == 0\n        return ''\n    if title\n    then \"\"\"<a href=\"#{ href }\" title=\"#{ title }\">#{ text }</a>\"\"\"\n    else \"\"\"<a href=\"#{ href }\">#{ text }</a>\"\"\"\n\n  image: (href, title, text) ->\n    if title\n    then \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\" title=\"#{ title }\">\"\"\"\n    else \"\"\"<img src=\"#{ href }\" alt=\"#{ text }\">\"\"\"\n\n  text: (text) ->\n    text\n\n\n# Parsing & Compiling\nclass Parser\n  @parse = (src, options, renderer) ->\n    new Parser(options, renderer).parse src\n\n  constructor: (options) ->\n    @tokens = []\n    @token = null\n    @options = options or marked.defaults\n    @options.renderer = @options.renderer or new Renderer\n    @renderer = @options.renderer\n    @renderer.options = @options\n\n  parse: (src) ->\n    @inline = new InlineLexer(src.links, @options, @renderer)\n    @tokens = src.reverse()\n    out = ''\n    while @next()\n      out += @tok()\n    tag = @options.tag\n    if tag\n      out = \"\"\"<#{tag}>#{out}</#{tag}>\"\"\"\n    out\n\n  next: ->\n    @token = @tokens.pop()\n\n  peek: ->\n    @tokens[@tokens.length - 1] or 0\n\n  parseText: ->\n    body = @token.text\n    while @peek().type == 'text'\n      body += '\\n' + @next().text\n    @inline.output body\n\n  ###*\n  # Parse Current Token\n  ###\n\n  tok: ->\n    switch @token.type\n      when 'space'\n        @token.text\n\n      when 'hr'\n        @renderer.hr()\n\n      when 'heading'\n        @renderer.heading(@inline.output(@token.text), @token.depth, @token.text)\n\n      when 'code'\n        @renderer.code(@token.text, @token.lang, @token.escaped)\n\n      when 'table'\n        cell = ''\n        for o, i in @token.header\n          flags =\n            header: true\n            align: @token.align[i]\n          cell += @renderer.tablecell @inline.output(o),\n            header: true\n            align: @token.align[i]\n        header = @renderer.tablerow(cell)\n\n        body = ''\n        for row, i in @token.cells\n          cell = ''\n          for _row, j in row\n            cell += @renderer.tablecell @inline.output(_row),\n              header: false\n              align: @token.align[j]\n          body += @renderer.tablerow(cell)\n        @renderer.table(header, body)\n\n      when 'blockquote_start'\n        body = ''\n        while @next().type != 'blockquote_end'\n          body += @tok()\n        @renderer.blockquote(body)\n\n      when 'list_start'\n        body = ''\n        ordered = @token.ordered\n        while @next().type != 'list_end'\n          body += @tok()\n        @renderer.list(body, ordered)\n\n      when 'list_item_start'\n        body = ''\n        while @next().type != 'list_item_end'\n          body +=\n            if @token.type == 'text'\n            then @parseText()\n            else @tok()\n        @renderer.listitem(body)\n\n      when 'loose_item_start'\n        body = ''\n        while @next().type != 'list_item_end'\n          body += @tok()\n        @renderer.listitem(body)\n\n      when 'html'\n        html =\n          if !@token.pre\n          then @inline.output(@token.text)\n          else @token.text\n        @renderer.html(html)\n\n      when 'paragraph'\n        @renderer.paragraph(@inline.output(@token.text))\n\n      when 'text'\n        @renderer.paragraph(@parseText())\n\n\n\n# Marked\nmarked = (src, opt, callback) ->\n  if callback || typeof opt == 'function'\n    if !callback\n      callback = opt\n      opt = null\n    opt = Object.assign({}, marked.defaults, opt or {})\n    highlight = opt.highlight\n\n    try\n      tokens = Lexer.lex(src, opt)\n    catch e\n      return callback(e)\n    pending = tokens.length\n\n    done = (err) ->\n      if err\n        opt.highlight = highlight\n        return callback(err)\n\n      try\n        out = Parser.parse(tokens, opt)\n      catch e\n        err = e\n      opt.highlight = highlight\n      if err\n      then callback(err)\n      else callback(null, out)\n\n    if !highlight or highlight.length < 3\n      return done()\n\n    delete opt.highlight\n\n    if !pending\n      return done()\n\n    tokens.map (token)->\n      if token.type != 'code'\n        return --pending or done()\n      highlight token.text, token.lang, (err, code) ->\n        if err\n          return done(err)\n        if code in [null, token.text]\n          return --pending or done()\n        token.text = code\n        token.escaped = true\n        --pending or done()\n        return\n      return\n    return\n\n  try\n    if opt\n      opt = Object.assign({}, marked.defaults, opt)\n    return Parser.parse Lexer.lex(src, opt), opt\n  catch e\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.'\n    if (opt or marked.defaults).silent\n      return '<p>An error occured:</p><pre>' + escape(e.message + '', true) + '</pre>'\n    throw e\n  return\n\n\n# Options\nmarked.options =\nmarked.setOptions = (opt) ->\n  Object.assign marked.defaults, opt\n  marked\n\nmarked.defaults =\n  tag: null\n  gfm: true\n  tables: true\n  breaks: false\n  sanitize: false\n  sanitizer: null\n  mangle: true\n  smartLists: false\n  silent: false\n  highlight: null\n  langPrefix: 'lang-'\n  smartypants: false\n  headerPrefix: ''\n  renderer: new Renderer\n\n\n# Expose\n\nmarked.Parser = Parser\nmarked.parser = Parser.parse\n\nmarked.Renderer = Renderer\n\nmarked.Lexer = Lexer\nmarked.lexer = Lexer.lex\n\nmarked.InlineLexer = InlineLexer\nmarked.inlineLexer = InlineLexer.output\n\nmarked.parse = marked\n\nmodule.exports = marked\n"
  ]
}